#!/usr/bin/env ruby

require 'json'
require 'net/http'
require 'uri'
require 'digest'
require 'time'

# Rate limiter to respect RTM's API limits
class RateLimiter
  def initialize(requests_per_second: 1, burst: 3)
    @requests_per_second = requests_per_second
    @burst = burst
    @min_interval = 1.0 / @requests_per_second
    @request_times = []
  end
  
  def wait_if_needed
    now = Time.now.to_f
    
    # Remove requests older than 1 second
    @request_times.reject! { |t| now - t > 1.0 }
    
    # If we've made burst requests in the last second, wait
    if @request_times.size >= @burst
      oldest_in_window = @request_times.first
      wait_time = (oldest_in_window + 1.0) - now
      if wait_time > 0
        STDERR.puts "[Rate limit] Waiting #{wait_time.round(2)}s..."
        sleep(wait_time)
      end
    end
    
    # Record this request
    @request_times << Time.now.to_f
  end
end

class RTMClient
  BASE_URL = 'https://api.rememberthemilk.com/services/rest/'
  
  def initialize(api_key, shared_secret)
    @api_key = api_key
    @shared_secret = shared_secret
    @rate_limiter = RateLimiter.new(requests_per_second: 1, burst: 3)
  end
  
  def call_method(method, params = {})
    # Add required parameters
    params[:method] = method
    params[:api_key] = @api_key
    params[:format] = 'json'
    
    # Add auth token if available and not an auth method
    unless method.start_with?('rtm.auth.') || method == 'rtm.test.echo'
      auth_token = load_auth_token
      params[:auth_token] = auth_token if auth_token
    end
    
    # Add timeline for write operations
    if requires_timeline?(method)
      timeline = get_timeline
      params[:timeline] = timeline if timeline
    end
    
    # Generate API signature
    params[:api_sig] = generate_signature(params)
    
    # Make request
    uri = URI(BASE_URL)
    uri.query = URI.encode_www_form(params)
    
    # Apply rate limiting
    @rate_limiter.wait_if_needed
    
    response = Net::HTTP.get_response(uri)
    
    if response.code == '200'
      JSON.parse(response.body)
    else
      { 'error' => "HTTP #{response.code}: #{response.message}" }
    end
  rescue => e
    { 'error' => "Request failed: #{e.message}" }
  end
  
  private
  
  def requires_timeline?(method)
    # Write operations that modify data require a timeline
    write_methods = %w[
      rtm.lists.add rtm.lists.archive rtm.lists.delete rtm.lists.setDefaultList 
      rtm.lists.setName rtm.lists.unarchive rtm.tasks.add rtm.tasks.addTags 
      rtm.tasks.complete rtm.tasks.delete rtm.tasks.movePriority rtm.tasks.moveTo 
      rtm.tasks.notes.add rtm.tasks.notes.delete rtm.tasks.notes.edit 
      rtm.tasks.postpone rtm.tasks.removeTags rtm.tasks.setDueDate 
      rtm.tasks.setEstimate rtm.tasks.setLocation rtm.tasks.setName 
      rtm.tasks.setParentTask rtm.tasks.setPriority rtm.tasks.setRecurrence 
      rtm.tasks.setStartDate rtm.tasks.setTags rtm.tasks.setURL rtm.tasks.uncomplete
    ]
    write_methods.include?(method)
  end
  
  def get_timeline
    return @timeline if @timeline
    
    # Get a new timeline
    result = call_method_without_timeline('rtm.timelines.create')
    @timeline = result.dig('rsp', 'timeline')
    @timeline
  end
  
  def call_method_without_timeline(method, params = {})
    # Internal method that doesn't add timeline (to avoid infinite recursion)
    params[:method] = method
    params[:api_key] = @api_key
    params[:format] = 'json'
    
    # Add auth token if available and not an auth method
    unless method.start_with?('rtm.auth.') || method == 'rtm.test.echo'
      auth_token = load_auth_token
      params[:auth_token] = auth_token if auth_token
    end
    
    # Generate API signature
    params[:api_sig] = generate_signature(params)
    
    # Make request
    uri = URI(BASE_URL)
    uri.query = URI.encode_www_form(params)
    
    # Apply rate limiting
    @rate_limiter.wait_if_needed
    
    response = Net::HTTP.get_response(uri)
    
    if response.code == '200'
      JSON.parse(response.body)
    else
      { 'error' => "HTTP #{response.code}: #{response.message}" }
    end
  rescue => e
    { 'error' => "Request failed: #{e.message}" }
  end
  
  def load_auth_token
    token_file = File.join(__dir__, '.rtm_auth_token')
    return nil unless File.exist?(token_file)
    File.read(token_file).strip
  rescue
    nil
  end
  
  def generate_signature(params)
    # Sort parameters alphabetically and create signature string
    sorted_params = params.sort.map { |k, v| "#{k}#{v}" }.join
    signature_string = @shared_secret + sorted_params
    Digest::MD5.hexdigest(signature_string)
  end
end

class RTMMCPServer
  def initialize(auth_token = nil)
    # Get credentials from command line arguments or environment
    @api_key = ARGV[0] || ENV['RTM_API_KEY']
    @shared_secret = ARGV[1] || ENV['RTM_SHARED_SECRET']
    
    unless @api_key && @shared_secret
      STDERR.puts "Usage: #{$0} [api-key] [shared-secret]"
      STDERR.puts "Or set RTM_API_KEY and RTM_SHARED_SECRET environment variables"
      exit 1
    end
    
    @rtm = RTMClient.new(@api_key, @shared_secret)
    @tools = [
      {
        name: 'test_connection',
        description: 'Test basic connectivity to RTM API',
        inputSchema: {
          type: 'object',
          properties: {},
          required: []
        }
      },
      {
        name: 'list_all_lists',
        description: 'Get all RTM lists',
        inputSchema: {
          type: 'object',
          properties: {},
          required: []
        }
      },
      {
        name: 'create_list',
        description: 'Create a new RTM list',
        inputSchema: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              description: 'Name of the new list'
            }
          },
          required: ['name']
        }
      },
      {
        name: 'list_tasks',
        description: 'Get tasks from RTM with optional filtering',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'Filter by specific list ID (optional)'
            },
            filter: {
              type: 'string',
              description: 'RTM search filter (e.g., \'status:incomplete\', \'dueWithin:"1 week"\')'
            },
            show_ids: {
              type: 'boolean',
              description: 'Show task IDs for operations (default: false)'
            }
          },
          required: []
        }
      },
      {
        name: 'create_task',
        description: 'Create a new task in RTM',
        inputSchema: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              description: 'Task name'
            },
            list_id: {
              type: 'string',
              description: 'List ID to create task in (optional, uses default list if not specified)'
            }
          },
          required: ['name']
        }
      },
      {
        name: 'complete_task',
        description: 'Mark a task as complete',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'List ID containing the task'
            },
            taskseries_id: {
              type: 'string',
              description: 'Task series ID'
            },
            task_id: {
              type: 'string',
              description: 'Task ID'
            }
          },
          required: ['list_id', 'taskseries_id', 'task_id']
        }
      },
      {
        name: 'set_task_priority',
        description: 'Set the priority of a task',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'List ID containing the task'
            },
            taskseries_id: {
              type: 'string',
              description: 'Task series ID'
            },
            task_id: {
              type: 'string',
              description: 'Task ID'
            },
            priority: {
              type: 'string',
              description: 'Priority level: 1 (High), 2 (Medium), 3 (Low), or empty string (None)',
              enum: ['1', '2', '3', '']
            }
          },
          required: ['list_id', 'taskseries_id', 'task_id', 'priority']
        }
      },
      {
        name: 'add_task_tags',
        description: 'Add tags to a task',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'List ID containing the task'
            },
            taskseries_id: {
              type: 'string',
              description: 'Task series ID'
            },
            task_id: {
              type: 'string',
              description: 'Task ID'
            },
            tags: {
              type: 'string',
              description: 'Comma-separated list of tags to add'
            }
          },
          required: ['list_id', 'taskseries_id', 'task_id', 'tags']
        }
      },
      {
        name: 'remove_task_tags',
        description: 'Remove tags from a task',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'List ID containing the task'
            },
            taskseries_id: {
              type: 'string',
              description: 'Task series ID'
            },
            task_id: {
              type: 'string',
              description: 'Task ID'
            },
            tags: {
              type: 'string',
              description: 'Comma-separated list of tags to remove'
            }
          },
          required: ['list_id', 'taskseries_id', 'task_id', 'tags']
        }
      },
      {
        name: 'archive_list',
        description: 'Archive an RTM list',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'ID of the list to archive'
            }
          },
          required: ['list_id']
        }
      },
      {
        name: 'add_task_note',
        description: 'Add a note to a task',
        inputSchema: {
          type: 'object',
          properties: {
            list_id: {
              type: 'string',
              description: 'List ID containing the task'
            },
            taskseries_id: {
              type: 'string',
              description: 'Task series ID'
            },
            task_id: {
              type: 'string',
              description: 'Task ID'
            },
            title: {
              type: 'string',
              description: 'Note title (optional)'
            },
            text: {
              type: 'string',
              description: 'Note text content'
            }
          },
          required: ['list_id', 'taskseries_id', 'task_id', 'text']
        }
      },
      {
        name: 'edit_task_note',
        description: 'Edit an existing note on a task',
        inputSchema: {
          type: 'object',
          properties: {
            note_id: {
              type: 'string',
              description: 'Note ID to edit'
            },
            title: {
              type: 'string',
              description: 'New note title (optional)'
            },
            text: {
              type: 'string',
              description: 'New note text content'
            }
          },
          required: ['note_id', 'text']
        }
      },
      {
        name: 'delete_task_note',
        description: 'Delete a note from a task',
        inputSchema: {
          type: 'object',
          properties: {
            note_id: {
              type: 'string',
              description: 'Note ID to delete'
            }
          },
          required: ['note_id']
        }
      },
      {
        name: 'create_subtask',
        description: 'Create a new task as a subtask of an existing task (requires Pro account)',
        inputSchema: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              description: 'Name of the subtask'
            },
            parent_list_id: {
              type: 'string',
              description: 'List ID of the parent task'
            },
            parent_taskseries_id: {
              type: 'string',
              description: 'Task series ID of the parent task'
            },
            parent_task_id: {
              type: 'string',
              description: 'Task ID of the parent task'
            }
          },
          required: ['name', 'parent_list_id', 'parent_taskseries_id', 'parent_task_id']
        }
      }
    ]
  end  
  def handle_request(request)
    case request['method']
    when 'initialize'
      { 
        protocolVersion: '2024-11-05',
        capabilities: { tools: {} },
        serverInfo: { name: 'rtm-mcp', version: '0.1.0' }
      }
    when 'tools/list'
      { tools: @tools }
    when 'tools/call'
      handle_tool_call(request['params'])
    when 'notifications/initialized'
      # Client notification that initialization is complete
      nil
    else
      { error: { code: -32601, message: 'Method not found' } }
    end
  end
  
  private
  
  def handle_tool_call(params)
    tool_name = params['name']
    args = params['arguments'] || {}
    
    result = case tool_name
    when 'test_connection'
      test_connection
    when 'list_all_lists'
      list_all_lists
    when 'create_list'
      create_list(args['name'])
    when 'list_tasks'
      list_tasks(args['list_id'], args['filter'], args['show_ids'])
    when 'create_task'
      create_task(args['name'], args['list_id'])
    when 'complete_task'
      complete_task(args['list_id'], args['taskseries_id'], args['task_id'])
    when 'set_task_priority'
      set_task_priority(args['list_id'], args['taskseries_id'], args['task_id'], args['priority'])
    when 'add_task_tags'
      add_task_tags(args['list_id'], args['taskseries_id'], args['task_id'], args['tags'])
    when 'remove_task_tags'
      remove_task_tags(args['list_id'], args['taskseries_id'], args['task_id'], args['tags'])
    when 'archive_list'
      archive_list(args['list_id'])
    when 'add_task_note'
      add_task_note(args['list_id'], args['taskseries_id'], args['task_id'], args['title'], args['text'])
    when 'edit_task_note'
      edit_task_note(args['note_id'], args['title'], args['text'])
    when 'delete_task_note'
      delete_task_note(args['note_id'])
    when 'create_subtask'
      create_subtask(args['name'], args['parent_list_id'], args['parent_taskseries_id'], args['parent_task_id'])
    else
      return { error: { code: -32602, message: "Unknown tool: #{tool_name}" } }
    end
    
    { content: [{ type: 'text', text: result }] }
  end
  
  def test_connection
    result = @rtm.call_method('rtm.test.echo', { test: 'hello' })
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      "✅ RTM API connection successful!\n\nResponse: #{JSON.pretty_generate(result)}"
    end
  end
  
  def list_all_lists
    result = @rtm.call_method('rtm.lists.getList')
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      lists = result.dig('rsp', 'lists', 'list') || []
      lists = [lists] unless lists.is_a?(Array)  # Handle single list case
      
      list_text = lists.map do |list|
        "• #{list['name']} (ID: #{list['id']})" + 
        (list['archived'] == '1' ? ' [archived]' : '') +
        (list['smart'] == '1' ? ' [smart]' : '')
      end.join("\n")
      
      "📝 RTM Lists:\n\n#{list_text}"
    end
  end
  
  def create_list(name)
    return "Error: List name is required" unless name && !name.empty?
    
    result = @rtm.call_method('rtm.lists.add', { name: name })
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      list = result.dig('rsp', 'list')
      if list
        "✅ Created list: #{list['name']} (ID: #{list['id']})"
      else
        "❌ List created but couldn't parse response"
      end
    end
  end
  
  def list_tasks(list_id = nil, filter = nil, show_ids = false)
    params = { v: '2' }  # Use API v2 to get parent_task_id fields
    params[:list_id] = list_id if list_id
    params[:filter] = filter if filter && !filter.empty?
    
    result = @rtm.call_method('rtm.tasks.getList', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      # Get list of parent task IDs (tasks that have subtasks)
      parent_task_ids = get_parent_task_ids(list_id, filter)
      format_tasks(result, parent_task_ids, show_ids)
    end
  end
  
  def create_task(name, list_id = nil)
    return "Error: Task name is required" unless name && !name.empty?
    
    params = { name: name }
    params[:list_id] = list_id if list_id
    
    result = @rtm.call_method('rtm.tasks.add', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      # RTM returns the task in a list structure
      list = result.dig('rsp', 'list')
      taskseries = list&.dig('taskseries')
      
      # Handle case where taskseries is an array
      if taskseries.is_a?(Array)
        task = taskseries.first
      else
        task = taskseries
      end
      
      if task
        task_name = task['name'] || name
        list_name = list['name'] || 'Unknown list'
        "✅ Created task: #{task_name} in #{list_name}"
      else
        "❌ Task created but couldn't parse response"
      end
    end
  end
  
  def complete_task(list_id, taskseries_id, task_id)
    unless list_id && taskseries_id && task_id
      return "Error: list_id, taskseries_id, and task_id are required"
    end
    
    params = {
      list_id: list_id,
      taskseries_id: taskseries_id,
      task_id: task_id
    }
    
    result = @rtm.call_method('rtm.tasks.complete', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      "✅ Task completed successfully!"
    end
  end
  
  def set_task_priority(list_id, taskseries_id, task_id, priority)
    unless list_id && taskseries_id && task_id && priority != nil
      return "Error: list_id, taskseries_id, task_id, and priority are required"
    end
    
    # Validate priority value
    unless ['1', '2', '3', ''].include?(priority)
      return "Error: Priority must be '1' (High), '2' (Medium), '3' (Low), or '' (None)"
    end
    
    params = {
      list_id: list_id,
      taskseries_id: taskseries_id,
      task_id: task_id,
      priority: priority
    }
    
    result = @rtm.call_method('rtm.tasks.setPriority', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      # Extract priority from response
      list_data = result.dig('rsp', 'list')
      if list_data
        list_data = list_data.first if list_data.is_a?(Array)
        
        taskseries = list_data['taskseries']
        if taskseries
          taskseries = taskseries.first if taskseries.is_a?(Array)
          task = taskseries['task']
          task = task.first if task.is_a?(Array)
          
          priority_display = case task['priority']
          when '1' then '🔴 High'
          when '2' then '🟡 Medium'
          when '3' then '🔵 Low'
          when 'N' then 'None'
          else task['priority']
          end
          
          "✅ Task priority set to: #{priority_display}"
        else
          "✅ Task priority updated successfully!"
        end
      else
        "✅ Task priority updated successfully!"
      end
    end
  end
  
  def add_task_tags(list_id, taskseries_id, task_id, tags)
    unless list_id && taskseries_id && task_id && tags && !tags.empty?
      return "Error: list_id, taskseries_id, task_id, and tags are required"
    end
    
    params = {
      list_id: list_id,
      taskseries_id: taskseries_id,
      task_id: task_id,
      tags: tags
    }
    
    result = @rtm.call_method('rtm.tasks.addTags', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      # Extract tags from response
      list_data = result.dig('rsp', 'list')
      if list_data
        list_data = list_data.first if list_data.is_a?(Array)
        
        taskseries = list_data['taskseries']
        if taskseries
          taskseries = taskseries.first if taskseries.is_a?(Array)
          
          tags_data = []
          if taskseries['tags']
            if taskseries['tags'].is_a?(Array)
              tags_data = taskseries['tags']
            elsif taskseries['tags'].is_a?(Hash) && taskseries['tags']['tag']
              tag_array = taskseries['tags']['tag']
              tags_data = tag_array.is_a?(Array) ? tag_array : [tag_array]
            end
          end
          
          tag_display = tags_data.empty? ? "none" : tags_data.join(", ")
          "✅ Tags added! Current tags: #{tag_display}"
        else
          "✅ Tags added successfully!"
        end
      else
        "✅ Tags added successfully!"
      end
    end
  end
  
  def remove_task_tags(list_id, taskseries_id, task_id, tags)
    unless list_id && taskseries_id && task_id && tags && !tags.empty?
      return "Error: list_id, taskseries_id, task_id, and tags are required"
    end
    
    params = {
      list_id: list_id,
      taskseries_id: taskseries_id,
      task_id: task_id,
      tags: tags
    }
    
    result = @rtm.call_method('rtm.tasks.removeTags', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      # Extract remaining tags from response
      list_data = result.dig('rsp', 'list')
      if list_data
        list_data = list_data.first if list_data.is_a?(Array)
        
        taskseries = list_data['taskseries']
        if taskseries
          taskseries = taskseries.first if taskseries.is_a?(Array)
          
          tags_data = []
          if taskseries['tags']
            if taskseries['tags'].is_a?(Array)
              tags_data = taskseries['tags']
            elsif taskseries['tags'].is_a?(Hash) && taskseries['tags']['tag']
              tag_array = taskseries['tags']['tag']
              tags_data = tag_array.is_a?(Array) ? tag_array : [tag_array]
            end
          end
          
          tag_display = tags_data.empty? ? "none" : tags_data.join(", ")
          "✅ Tags removed! Current tags: #{tag_display}"
        else
          "✅ Tags removed successfully!"
        end
      else
        "✅ Tags removed successfully!"
      end
    end
  end
  
  def archive_list(list_id)
    return "Error: List ID is required" unless list_id && !list_id.empty?
    
    result = @rtm.call_method('rtm.lists.archive', { list_id: list_id })
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      list = result.dig('rsp', 'list')
      if list
        "✅ Archived list: #{list['name']} (ID: #{list['id']})"
      else
        "✅ List archived successfully!"
      end
    end
  end
  
  def add_task_note(list_id, taskseries_id, task_id, title, text)
    return "Error: List ID, taskseries ID, task ID and text are required" unless list_id && taskseries_id && task_id && text
    
    params = {
      list_id: list_id,
      taskseries_id: taskseries_id,
      task_id: task_id,
      note_text: text
    }
    params[:note_title] = title if title && !title.empty?
    
    result = @rtm.call_method('rtm.tasks.notes.add', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      note = result.dig('rsp', 'note')
      if note
        title_display = note['title'] && !note['title'].empty? ? note['title'] : '(No title)'
        text_preview = note['$t'] ? note['$t'].split("\n").first[0..50] : ''
        text_preview += '...' if note['$t'] && note['$t'].length > 50
        
        "✅ Note added successfully!\n📝 Title: #{title_display}\n📄 Text: #{text_preview}\n🆔 Note ID: #{note['id']}"
      else
        "✅ Note added successfully!"
      end
    end
  end
  
  def edit_task_note(note_id, title, text)
    return "Error: Note ID and text are required" unless note_id && text
    
    params = {
      note_id: note_id,
      note_text: text
    }
    params[:note_title] = title if title && !title.empty?
    
    result = @rtm.call_method('rtm.tasks.notes.edit', params)
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      note = result.dig('rsp', 'note')
      if note
        title_display = note['title'] && !note['title'].empty? ? note['title'] : '(No title)'
        text_preview = note['$t'] ? note['$t'].split("\n").first[0..50] : ''
        text_preview += '...' if note['$t'] && note['$t'].length > 50
        
        "✅ Note updated successfully!\n📝 Title: #{title_display}\n📄 Text: #{text_preview}"
      else
        "✅ Note updated successfully!"
      end
    end
  end
  
  def delete_task_note(note_id)
    return "Error: Note ID is required" unless note_id && !note_id.empty?
    
    result = @rtm.call_method('rtm.tasks.notes.delete', { note_id: note_id })
    
    if result['error'] || result.dig('rsp', 'stat') == 'fail'
      error_msg = result['error'] || result.dig('rsp', 'err', 'msg') || 'Unknown error'
      "❌ RTM API Error: #{error_msg}"
    else
      "✅ Note deleted successfully!"
    end
  end
  
  def create_subtask(name, parent_list_id, parent_taskseries_id, parent_task_id)
    return "Error: Subtask name is required" unless name && !name.empty?
    return "Error: Parent task IDs are required" unless parent_list_id && parent_taskseries_id && parent_task_id
    
    # Step 1: Create the task
    create_params = { name: name, list_id: parent_list_id }
    create_result = @rtm.call_method('rtm.tasks.add', create_params)
    
    if create_result['error'] || create_result.dig('rsp', 'stat') == 'fail'
      error_msg = create_result['error'] || create_result.dig('rsp', 'err', 'msg') || 'Unknown error'
      return "❌ Error creating task: #{error_msg}"
    end
    
    # Extract the created task info
    list = create_result.dig('rsp', 'list')
    taskseries = list&.dig('taskseries')
    taskseries = [taskseries] unless taskseries.is_a?(Array)
    new_task = taskseries.first
    
    if !new_task
      return "❌ Task created but couldn't parse response"
    end
    
    task = new_task['task']
    task = [task] unless task.is_a?(Array)
    
    new_task_info = {
      list_id: list['id'],
      taskseries_id: new_task['id'],
      task_id: task[0]['id'],
      name: new_task['name']
    }
    
    # Step 2: Set it as a subtask
    set_parent_params = {
      v: '2',  # Required for subtask operations
      list_id: new_task_info[:list_id],
      taskseries_id: new_task_info[:taskseries_id],
      task_id: new_task_info[:task_id],
      parent_task_id: parent_task_id
    }
    
    set_parent_result = @rtm.call_method('rtm.tasks.setParentTask', set_parent_params)
    
    if set_parent_result['error'] || set_parent_result.dig('rsp', 'stat') == 'fail'
      error_msg = set_parent_result['error'] || set_parent_result.dig('rsp', 'err', 'msg') || 'Unknown error'
      
      # Task was created but couldn't be made a subtask
      return "⚠️ Task created but couldn't set as subtask: #{error_msg}\n" +
             "Created task: #{new_task_info[:name]}\n" +
             "IDs: list=#{new_task_info[:list_id]}, series=#{new_task_info[:taskseries_id]}, task=#{new_task_info[:task_id]}"
    end
    
    # Success!
    "✅ Created subtask: #{new_task_info[:name]}\n" +
    "IDs: list=#{new_task_info[:list_id]}, series=#{new_task_info[:taskseries_id]}, task=#{new_task_info[:task_id]}"
  end
  
  private
  
  def get_parent_task_ids(list_id = nil, original_filter = nil)
    # Build filter to find tasks with subtasks
    parent_filter = 'hasSubtasks:true'
    
    # Add status:incomplete if the original filter had it
    if original_filter && original_filter.include?('status:incomplete')
      parent_filter += ' AND status:incomplete'
    end
    
    params = { filter: parent_filter }
    params[:list_id] = list_id if list_id
    
    result = @rtm.call_method('rtm.tasks.getList', params)
    
    parent_ids = []
    if result.dig('rsp', 'stat') == 'ok'
      lists = result.dig('rsp', 'tasks', 'list')
      lists = [lists] unless lists.is_a?(Array) || lists.nil?
      
      lists&.each do |list|
        next unless list['taskseries']
        taskseries = list['taskseries']
        taskseries = [taskseries] unless taskseries.is_a?(Array)
        
        taskseries.each do |ts|
          parent_ids << ts['id']
        end
      end
    end
    
    parent_ids
  end
  
  def format_tasks(result, parent_task_ids = [], show_ids = false)
    lists = result.dig('rsp', 'tasks', 'list')
    return "📋 No tasks found." unless lists
    
    lists = [lists] unless lists.is_a?(Array)
    task_count = 0
    output = []
    
    lists.each do |list|
      next unless list['taskseries']
      
      list_name = list['name'] || "List #{list['id']}"
      taskseries = list['taskseries']
      taskseries = [taskseries] unless taskseries.is_a?(Array)
      
      list_tasks = []
      taskseries.each do |ts|
        task = ts['task']
        task = [task] unless task.is_a?(Array)
        
        task.each do |t|
          next if t['completed'] && !t['completed'].empty?  # Skip completed tasks
          
          status = "🔲"
          priority = case ts['priority']
                   when '1' then " 🔴"
                   when '2' then " 🟡"  
                   when '3' then " 🔵"
                   else ""
                   end
          
          due_text = t['due'] && !t['due'].empty? ? " (due: #{t['due']})" : ""
          
          # Check if this task has subtasks
          subtask_indicator = parent_task_ids.include?(ts['id']) ? " [has subtasks]" : ""
          
          list_tasks << "#{status} #{ts['name']}#{priority}#{due_text}#{subtask_indicator}"
          
          # Add IDs if requested
          if show_ids
            list_tasks << "   IDs: list=#{list['id']}, series=#{ts['id']}, task=#{t['id']}"
          end
          
          # Add notes if present
          if ts['notes'] && ts['notes'].is_a?(Hash) && ts['notes']['note']
            notes = ts['notes']['note']
            notes = [notes] unless notes.is_a?(Array)
            
            notes.each do |note|
              next unless note.is_a?(Hash)  # Skip if note isn't a hash
              note_text = note['$t'] || note['text'] || ''
              next if note_text.empty?
              
              # Truncate long notes and clean up newlines
              if note_text.length > 80
                note_text = note_text[0..77].gsub(/\n/, ' ') + "..."
              else
                note_text = note_text.gsub(/\n/, ' ')
              end
              list_tasks << "   📝 #{note_text}"
            end
          end
          
          task_count += 1
        end
      end
      
      if list_tasks.any?
        output.concat(list_tasks)
      end
    end
    
    if output.empty?
      "📋 No incomplete tasks found."
    else
      "📋 **Tasks** (#{task_count} total):\n\n" + output.join("\n")
    end
  end
end

# Only run the server if this file is being executed directly
if __FILE__ == $0
  # Main loop
  server = RTMMCPServer.new
  
  STDERR.puts "RTM MCP Server starting..."
  STDERR.flush
  
  while line = STDIN.gets
    begin
      request = JSON.parse(line)
      
      # Handle notifications (no response needed)
      if request['method'] && request['method'].start_with?('notifications/')
        server.handle_request(request)
        next
      end
      
      result = server.handle_request(request)
      
      # Only send response for requests with an id
      if request['id']
        response = {
          jsonrpc: '2.0',
          id: request['id']
        }
        
        if result && result[:error]
          response[:error] = result[:error]
        elsif result
          response[:result] = result
        else
          response[:result] = {}
        end
        
        puts JSON.generate(response)
        STDOUT.flush
      end
    rescue JSON::ParserError => e
      STDERR.puts "Parse error: #{e.message}"
      if request && request['id']
        puts JSON.generate({
          jsonrpc: '2.0',
          id: request['id'],
          error: { code: -32700, message: 'Parse error' }
        })
        STDOUT.flush
      end
    rescue => e
      STDERR.puts "Error: #{e.message}"
      STDERR.puts e.backtrace
      if request && request['id']
        puts JSON.generate({
          jsonrpc: '2.0',
          id: request['id'],
          error: { code: -32603, message: "Internal error: #{e.message}" }
        })
        STDOUT.flush
      end
    end
  end
end